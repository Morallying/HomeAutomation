
var serialport = require('serialport'),// include the library
   SerialPort = serialport.SerialPort, // make a local instance of it
   // get port name from the command line:
   portName = '/dev/ttyACM0';

var myPort = new SerialPort(portName, {
   baudRate: 9600});


var express = require('express');
var bodyParser = require('body-parser');
var omx = require('omxcontrol'); 
var app = express();

app.use(bodyParser.json());
app.use(omx());

//var exec = require('child_process').exec;
//var child = exec('/usr/bin/java -jar -Dupnp.config.address=192.168.1.36 /home/pi/ha-bridge-0.4.10.jar',
//	function(error, stdout,stderr){
//		console.log('running');
//		console.log(stdout);
//		console.log(stderr);
//		console.log(error);
//	});

app.get('/cablebox', function(req, res){
 cableBoxPower();
 res.send("OK");
});

app.get('/tv', function(req, res){
 tvPower();
 res.send("OK");
});

app.get('/receiver', function(req, res){
 receiverHDMI1();
 res.send("OK");
});

app.get('/entercenter',function(req, res){
 if(req.query.cmd == "on")
 {
   recursiveFunct([cableBoxPower, tvPower, receiverPower],750);
   res.send("EnterCenter On");
 }else
 {
   recursiveFunct([cableBoxFour, cableBoxZero, cableBoxOne, tvPower, receiverPower, cableBoxPower],1000);
   res.send("EnterCenter Off");
 }
});

app.get('/firetv',function(req, res){
 if(req.query.cmd == "on")
 {
   receiverHDMI2();
   res.send("FireTV On");
 }else
 {
   receiverHDMI1();
   res.send("FireTV Off");
 }
});

app.get('/chromecast',function(req, res){
 if(req.query.cmd == "on")
 {
   receiverHDMI3();
   res.send("Chromecast On");
 }else
 {
   receiverHDMI1();
   res.send("Chromecast Off");
 }
});

app.get('/bluetooth',function(req, res){
 if(req.query.cmd == "on")
 {
   recursiveFunct([tvInput, tvLeft, tvEnter, receiverDVD],1000);
   res.send("Bluetooth On");
 }else
 {
   recursiveFunct([tvInput,tvRight,tvEnter,receiverHDMI1],1000);
   res.send("Bluetooth Off");
 }
});

app.get('/steamlink',function(req, res){
 if(req.query.cmd == "on")
 {
  recursiveFunct([receiverHDMI4, irSwitch1],750);
  res.send("Steamlink On");
 }else
 {
  receiverHDMI1();
  res.send("Steamlink Off");
 }
});

app.get('/nintendo',function(req, res){
 if(req.query.cmd == "on")
 {
  recursiveFunct([receiverHDMI4, irSwitch3],750);
  res.send("Nintendo On");
 }else
 {
  receiverHDMI1();
  res.send("Nintendo Off");
 }
});

app.get('/playstation',function(req, res){
 if(req.query.cmd == "on")
 {
  recursiveFunct([receiverHDMI4, irSwitch2],750);
  res.send("Playstation On");
 }else
 {
  receiverHDMI1();
  res.send("Playstation Off");
 }
});

app.get('/dadshome',function(req,res){
 receiverHDMI4();
 omx.quit();
 setTimeout(function(){playEntryTheme();},12000);
 res.send("Dad's Home!"); 
});
 
app.post('/ircmd/',function(req,res){
var cmd = req.body.Value;
myPort.write(cmd);
res.send('CMD = ' + cmd);
});

app.post('/playmovie/',function(req,res){
var cmd = req.body.Value;
omx.start('./share/Movies/'+cmd);
res.send('CMD = ' + cmd);
});

 
app.listen(3000);
console.log('Listening on port 3000...');

function playEntryTheme(){
 setTimeout(function(){omx.pause();receiverHDMI1();},29000);
 omx.start('Imperial March.mp3');	
};

function irSwitch1(){
  myPort.write("~9034,4474,602,554,578,554,578,554,578,554,578,554,578,530,598,558,574,554,578,1674,578,1654,602,1674,578,1654,598,1678,578,1654,598,1674,578,1654,602,554,578,554,578,1674,578,554,578,554,574,554,578,554,578,554,578,1650,602,1674,582,530,598,1658,598,1650,602,1654,598,1654,602,1654,598,1000~");
}

function irSwitch2(){
  myPort.write("~9050,4466,606,550,578,526,602,550,582,550,578,550,582,550,578,550,582,546,582,1670,578,1646,606,1670,582,1670,578,1670,582,1670,578,1650,602,1670,582,550,578,550,578,554,578,1670,582,550,578,550,578,550,582,550,578,1670,582,1670,582,1670,578,550,578,1650,602,1650,602,1646,606,1642,606,1000~");
}

function irSwitch3(){
  myPort.write("~9054,4474,602,530,602,530,602,550,578,554,578,554,578,554,578,550,578,554,578,1674,578,1674,582,1674,578,1650,602,1674,578,1650,602,1650,602,1654,598,554,578,1674,578,534,598,1674,578,554,578,554,578,550,578,554,578,1674,578,554,578,1654,598,550,578,1654,598,1654,598,1654,602,1650,602,1000~");
}

function cableBoxPower(){
 myPort.write("~8820,4240,560,2060,540,4220,580,2060,540,4220,580,2060,540,2060,560,2040,560,2060,540,2060,540,2060,560,2040,560,2060,540,2060,540,4260,540,4240,560,2060,540~");
}

function receiverPower(){
 myPort.write("~21516|15~");
}

function tvPower(){
 myPort.write("~320,1980,340,2000,300,1980,340,800,300,800,340,780,340,1980,340,800,300,800,340,1960,360,680,440,800,300,820,300,820,300,800,340,800,300,27120,280,2020,300,2020,300,2020,280,820,300,820,320,820,300,1980,340,780,340,780,340,1980,460,680,300,820,300,800,340,800,300,800,340,800,300~");
}

function cableBoxFour(){
 myPort.write("~8840,4240,540,2060,560,2060,540,4260,560,2060,540,2060,540,2060,560,2060,540,2060,540,2060,560,2040,560,2060,540,2060,560,2040,560,2060,540,4260,560,4260,560~");
}

function cableBoxZero(){
 myPort.write("~8800,4260,540,2060,540,2060,560,2060,540,2060,540,2060,540,2060,560,2060,540,2060,540,2060,560,2040,560,2060,540,2060,560,2040,560,2060,540,2060,540,2060,560,40580,9260,2260,600,25164,9240,2260,600~");
}

function cableBoxOne(){
 myPort.write("~8820,4240,560,4260,560,2060,540,2060,540,2060,560,2040,560,2060,540,2060,560,2040,560,2060,540,2060,540,2060,560,2060,540,4260,560,4260,560,4260,560,4260,560~");
}

function receiverHDMI1(){
 myPort.write("~33044|20~");
}

function receiverHDMI2(){
 myPort.write("~2380,480,1200,480,620,480,640,460,620,520,1180,480,620,480,620,480,620,480,620,480,620,500,620,480,1200,500,600,500,600,480,620,520,1180,480,620,480,1200,500,600,480,620,15160,2360,480,1220,480,620,480,620,480,620,480,1200,480,640,460,620,500,620,480,620,480,620,480,620,480,1200,480,620,500,620,480,620,480,1200,480,620,480,1220,500,600,480,620,15120,2400,480,1200,480,620,500,600,480,640,500,1180,480,620,480,620,480,620,480,620,500,600,500,600,500,1200,480,620,480,620,480,620,480,1220,480,620,480,1200,480,620,480,620~");
}

function receiverHDMI3(){
 myPort.write("~2360,480,620,480,1220,480,620,480,620,480,1200,480,640,460,640,480,620,500,600,480,620,480,620,480,1200,500,620,460,640,480,620,480,1200,480,620,460,1240,480,620,500,600,15140,2360,500,620,480,1200,480,620,480,620,480,1200,480,640,480,620,480,620,500,600,480,620,480,620,480,1200,500,620,480,620,480,620,480,1200,480,620,480,1220,480,620,480,620,15120,2380,520,600,480,1200,480,620,480,620,480,1220,480,620,480,620,480,620,480,620,480,620,480,620,480,1200,500,620,480,620,480,620,480,1200,500,600,480,1220,480,620,480,620~");
}

function receiverHDMI4(){
 myPort.write("~2380,480,1200,480,1200,500,600,480,640,480,1200,480,620,480,620,480,620,520,580,500,600,500,600,480,1220,500,600,480,620,480,620,500,1200,480,620,480,1200,480,620,480,620,14560,2380,480,1200,500,1180,500,600,500,620,480,1200,480,620,480,620,480,620,520,580,500,600,500,620,480,1200,480,620,480,620,500,600,520,1180,480,620,480,1200,500,600,480,640,14520,2400,480,1200,500,1180,500,620,480,620,480,1200,480,620,500,600,480,640,480,620,480,620,480,620,500,1180,480,620,500,600,500,620,480,1200,480,620,480,1200,500,600,500,620~");
}

function receiverDVD(){
 myPort.write("~2380,480,1200,480,620,480,1200,500,1200,480,1200,480,1220,460,1220,480,620,480,620,480,620,480,620,460,1240,480,1200,480,620,500,600,19240,2360,480,1220,480,620,480,1200,480,1220,480,1200,480,1200,500,1200,480,620,480,620,480,620,480,620,500,1180,520,1180,480,620,480,620,19240,2360,480,1200,500,620,480,1200,480,1200,480,1220,440,1240,480,1200,480,620,500,620,480,620,480,620,480,1200,480,1200,500,620,480,620~");
}

function tvInput(){
 myPort.write("~320,2000,300,1980,340,1980,300,820,300,820,280,820,300,1980,340,800,300,820,300,2000,300,800,320,1980,340,1960,340,1960,340,780,340,800,300,23940,300,1980,340,1960,340,1960,340,800,300,800,320,820,280,2020,280,820,320,820,280,2020,280,820,320,1960,340,1920,400,1980,280,820,300,820,300~");
}

function tvLeft(){
 myPort.write("~280,2020,280,2000,280,2000,300,860,280,800,300,840,300,2000,300,800,340,1960,300,820,280,2020,320,820,300,800,340,1960,340,1980,300,820,280,23940,320,1980,340,1980,300,2000,300,820,300,820,280,800,360,1960,320,800,320,1960,360,740,380,1940,300,860,280,800,340,1960,300,2000,340,780,300,54740,280,2020,280,2000,280,2020,280,840,280,820,300,820,300,2000,300,820,300,2000,300,2000,300,2000,300,820,300,820,300,2020,300,760,380,800,300,23900,280,2040,240,2060,280,2020,240,880,240,840,300,840,260,2020,300,820,300,2020,300,2020,280,2000,280,820,300,840,240,2060,260,860,240,860,280~");
}

function tvRight(){
 myPort.write("~280,2020,280,2020,280,2020,280,820,320,800,300,800,340,1960,340,800,300,2000,300,820,280,2020,300,2000,300,820,280,1980,360,1960,340,800,300,22760,280,2020,300,2000,300,2000,300,780,360,760,360,760,340,1960,340,780,340,1960,340,800,300,1980,340,1980,300,820,300,1980,340,1960,340,800,300,27888,320,1960,340,1960,340,2000,300,780,340,820,280,800,340,1980,300,800,340,1960,340,1960,340,1980,300,800,340,780,340,1960,340,800,300,800,320,23920,280,2000,300,1940,400,1960,300,800,340,800,300,760,380,1960,340,800,300,2000,300,1980,340,1980,300,820,300,820,300,2000,300,820,300,780,360~");
}

function tvEnter(){
 myPort.write("~280,1980,340,1980,300,1980,340,800,300,800,340,780,340,1980,280,820,320,1960,360,780,320,2000,280,800,340,2000,280,2000,320,800,300,800,340,23920,320,2000,280,2020,280,2020,300,800,320,820,280,800,340,1980,300,820,300,1980,340,800,300,1960,360,800,300,1980,340,1980,300,800,340,800,280~");
}

function recursiveFunct(functs, timeout){
  if(functs.length <= 0) return;
  functs[0]();
  functs.splice(0,1);
  if(typeof(timeout) === "undefined") timeout = 500;
  setTimeout(function(){ recursiveFunct(functs,timeout)},timeout);
}
